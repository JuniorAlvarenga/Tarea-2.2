# -*- coding: utf-8 -*-
"""Ejercicio1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/158CUx88pVd0AaiHl7VDkhQRqKQAmW-bT
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# Cargar los datos
df = pd.read_csv('./housing.csv')
df = df.dropna()  # Eliminar registros con valores nulos

# características adicionales
df['rooms_per_person'] = df['total_rooms'] / df['population']  # Proporción de habitaciones por población
df['bedrooms_per_room'] = df['total_bedrooms'] / df['total_rooms']  # Proporción de dormitorios por habitación
df['population_density'] = df['population'] / (df['latitude'] * df['longitude'])  # Densidad de población
df['value_per_room'] = df['median_house_value'] / df['total_rooms']  # Valor por habitación
df['value_per_bedroom'] = df['median_house_value'] / df['total_bedrooms']  # Valor por dormitorio
df['rooms_times_population'] = df['total_rooms'] * df['population']  # Interacción de habitaciones y población


# Convertir variable categórica en dummies
df = pd.concat([df, pd.get_dummies(df['ocean_proximity'], dtype=int)], axis=1)
df.drop('ocean_proximity', axis=1, inplace=True)
#df.drop('total_bedrooms', axis=1, inplace=True)
df.drop('households', axis=1, inplace=True)# Tiene una colinealidad con total_bedrooms de un 0.98, esto empeora las predicciones


# Seleccionar solo las características con alta correlación
df.corr()['median_house_value'].sort_values(ascending=False)

# Método IQR para detectar outliers
Q1 = df.quantile(0.15)
Q3 = df.quantile(0.85)
IQR = Q3 - Q1

# Filtrar los outliers: eliminar los registros fuera del rango [Q1 - 1.5*IQR, Q3 + 1.5*IQR] CON 2.0 SE OBTUVO MEJORES RESULTADOS!!
df_no_outliers = df[~((df < (Q1 - 2.0 * IQR)) | (df > (Q3 + 2.0 * IQR))).any(axis=1)]

# Ver cuántos registros han sido eliminados
print(f"Registros originales: {df.shape[0]}")
print(f"Registros después de eliminar outliers: {df_no_outliers.shape[0]}")

# Separar características y etiqueta
X = df_no_outliers.drop('median_house_value', axis=1)
y = df_no_outliers['median_house_value']

# Dividir el conjunto de datos en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Escalar los datos
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Crear y entrenar el modelo de regresión lineal
modelo = LinearRegression()
modelo.fit(X_train_scaled, y_train)

# Evaluar el modelo
y_pred = modelo.predict(X_test_scaled)
train_score = modelo.score(X_train_scaled, y_train)
test_score = modelo.score(X_test_scaled, y_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print(f"RMSE: {rmse}")
print(f"Score en entrenamiento: {train_score}")
print(f"Score en prueba: {test_score}")

sns.set(rc={'figure.figsize':(15,8)})
sns.heatmap(data=df.corr(), annot=True, cmap='YlGnBu' )

# Crear las predicciones
y_pred = modelo.predict(X_test_scaled)

# Crear un DataFrame con las predicciones y los valores reales
comparativa = pd.DataFrame({
    "Predicción": y_pred,
    "Valor Real": y_test
})

# Mostrar la tabla
comparativa

"""**¿El resultado fue mejor o peor?**

Fue mejor

**¿Por qué crees que es así? Por qué son necesarios los cambios aplicados (fundamento del porqué afecta esos cambios)**

Eliminar households elimina tambien la redundancia de los datos mejorando el desempeño, eliminando los datos exagerados con los percentiles en un 15/85 hacia un mejor ajuste y agregando mejores caracteristicas que dan mejor informacion para hacer mejores predicciones.

"""